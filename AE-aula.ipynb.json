{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convolutional AutoEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import fetch_lfw_people\n",
    "from sklearn.decomposition import PCA as RandomizedPCA\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import svm\n",
    "from sklearn import metrics\n",
    "\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "from random import randint \n",
    "from tensorflow.keras import backend as K \n",
    "from tensorflow.keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D, ZeroPadding2D , Flatten, Reshape, ZeroPadding1D, Cropping2D, Cropping1D\n",
    "from tensorflow.keras.models import Model \n",
    "from tensorflow.keras.datasets import mnist, fashion_mnist\n",
    "from tensorflow.keras.callbacks import TensorBoard\n",
    "\n",
    "from tensorflow.keras.datasets import mnist\n",
    "import numpy as np\n",
    "np.random.seed(10)\n",
    "\n",
    "from time import time\n",
    "import numpy as np\n",
    "import tensorflow.keras.backend as K\n",
    "#from tensorflow.keras.engine.topology import Layer, InputSpec\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "from tensorflow.keras.models import Model, Sequential\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "from tensorflow.keras import callbacks\n",
    "\n",
    "from tensorflow.keras.initializers import VarianceScaling\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "from numpy import array\n",
    "from keras.models import Sequential\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense\n",
    "from keras.layers import RepeatVector\n",
    "from keras.layers import TimeDistributed\n",
    "from tensorflow.keras.utils import plot_model\n",
    "\n",
    "# lstm autoencoder reconstruct and predict sequence\n",
    "from numpy import array\n",
    "from keras.models import Model\n",
    "from keras.layers import Input\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense\n",
    "from keras.layers import RepeatVector\n",
    "from keras.layers import TimeDistributed\n",
    "from keras.utils import plot_model\n",
    "import os\n",
    "import random\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from keras import backend as K \n",
    "from keras import Input, Model\n",
    "from keras.engine.saving import save_model, load_model\n",
    "from keras.layers import RepeatVector, LSTM, Lambda #, np\n",
    "from pyfolder import PyFolder"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Carregando dados Mnist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#(x_train,y_train), (x_test,y_test) =  fashion_mnist.load_data() # Load mnist digits images and labels for train (x_train, y_train) and test (x_test, \n",
    "(x_train,y_train), (x_test,y_test) =  mnist.load_data() # Load mnist digits images and labels for train (x_train, y_train) and test (x_test, \n",
    "\n",
    "x_train=x_train.reshape(60000, 28, 28,1)\n",
    "x_test=x_test.reshape(10000, 28, 28,1)\n",
    "\n",
    "x_train = (x_train/255.0).astype(np.float32) # normalize the image and convert it to float.\n",
    "x_test = (x_test/255.0).astype(np.float32) # normalize the image and convert it to float."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Auto encoder convolucional com API funcional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_img = Input(shape=(28, 28, 1))  # adapt this if using `channels_first` image data format\n",
    "x = Conv2D(16, (3, 3), activation='relu', padding='same')(input_img)\n",
    "x = MaxPooling2D((2, 2), padding='same')(x)\n",
    "x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\n",
    "x = MaxPooling2D((2, 2), padding='same')(x)\n",
    "x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\n",
    "encoded = MaxPooling2D((2, 2), padding='same')(x)\n",
    "\n",
    "x = Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)\n",
    "x = UpSampling2D((2, 2))(x)\n",
    "x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)\n",
    "x = UpSampling2D((2, 2))(x)\n",
    "x = Conv2D(16, (3, 3), activation='relu')(x)\n",
    "x = UpSampling2D((2, 2))(x)\n",
    "decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n",
    "\n",
    "autoencoder = Model(input_img, decoded)\n",
    "autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#autoencoder.summary()\n",
    "#tf.keras.utils.plot_model(autoencoder,  show_shapes=True, to_file='conv_autoencoder.png')\n",
    "#plot_model(autoencoder,  show_shapes=True, to_file='conv_autoencoder.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 1213 samples, validate on 135 samples\n",
      "Epoch 1/60\n",
      "  16/1213 [..............................] - ETA: 3:32"
     ]
    },
    {
     "ename": "InvalidArgumentError",
     "evalue": " Input to reshape is a tensor with 49152 values, but the requested shape has 46624\n\t [[node model_1/reshape/Reshape (defined at /home/silvio/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1751) ]] [Op:__inference_distributed_function_1774]\n\nFunction call stack:\ndistributed_function\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-4566deafecc4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m                 \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m                 \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m                 callbacks=[TensorBoard(log_dir='/tmp/autoencoder')])\n\u001b[0m",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m    726\u001b[0m         \u001b[0mmax_queue_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_queue_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    727\u001b[0m         \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mworkers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 728\u001b[0;31m         use_multiprocessing=use_multiprocessing)\n\u001b[0m\u001b[1;32m    729\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    730\u001b[0m   def evaluate(self,\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, model, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, **kwargs)\u001b[0m\n\u001b[1;32m    322\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTRAIN\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m                 \u001b[0mtraining_context\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtraining_context\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 324\u001b[0;31m                 total_epochs=epochs)\n\u001b[0m\u001b[1;32m    325\u001b[0m             \u001b[0mcbks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_logs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepoch_logs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtraining_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mModeKeys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTRAIN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2.py\u001b[0m in \u001b[0;36mrun_one_epoch\u001b[0;34m(model, iterator, execution_function, dataset_size, batch_size, strategy, steps_per_epoch, num_samples, mode, training_context, total_epochs)\u001b[0m\n\u001b[1;32m    121\u001b[0m         step=step, mode=mode, size=current_batch_size) as batch_logs:\n\u001b[1;32m    122\u001b[0m       \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m         \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexecution_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    124\u001b[0m       \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mStopIteration\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutOfRangeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m         \u001b[0;31m# TODO(kaftan): File bug about tf function and errors.OutOfRangeError?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py\u001b[0m in \u001b[0;36mexecution_function\u001b[0;34m(input_fn)\u001b[0m\n\u001b[1;32m     84\u001b[0m     \u001b[0;31m# `numpy` translates Tensors to values in Eager mode.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     85\u001b[0m     return nest.map_structure(_non_none_constant_value,\n\u001b[0;32m---> 86\u001b[0;31m                               distributed_function(input_fn))\n\u001b[0m\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mexecution_function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtracing_count\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_counter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalled_without_tracing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0;31m# Lifting succeeded, so variables are initialized and we can run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    519\u001b[0m         \u001b[0;31m# stateless function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 520\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    521\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    522\u001b[0m       \u001b[0mcanon_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcanon_kwds\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1821\u001b[0m     \u001b[0;34m\"\"\"Calls a graph function specialized to the inputs.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1822\u001b[0m     \u001b[0mgraph_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_define_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1823\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mgraph_function\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1824\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1825\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_filtered_call\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   1139\u001b[0m          if isinstance(t, (ops.Tensor,\n\u001b[1;32m   1140\u001b[0m                            resource_variable_ops.BaseResourceVariable))),\n\u001b[0;32m-> 1141\u001b[0;31m         self.captured_inputs)\n\u001b[0m\u001b[1;32m   1142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1143\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1222\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1223\u001b[0m       flat_outputs = forward_function.call(\n\u001b[0;32m-> 1224\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1225\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1226\u001b[0m       \u001b[0mgradient_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_delayed_rewrite_functions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    509\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"executor_type\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecutor_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"config_proto\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    512\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m           outputs = execute.execute_with_cancellation(\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m     \u001b[0msix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraise_from\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_status_to_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m     keras_symbolic_tensors = [\n",
      "\u001b[0;32m/opt/miniconda3/lib/python3.7/site-packages/six.py\u001b[0m in \u001b[0;36mraise_from\u001b[0;34m(value, from_value)\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m:  Input to reshape is a tensor with 49152 values, but the requested shape has 46624\n\t [[node model_1/reshape/Reshape (defined at /home/silvio/.conda/envs/DL/lib/python3.7/site-packages/tensorflow_core/python/framework/ops.py:1751) ]] [Op:__inference_distributed_function_1774]\n\nFunction call stack:\ndistributed_function\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.callbacks import TensorBoard\n",
    "\n",
    "autoencoder.fit(x_train, x_train,\n",
    "                epochs=60,\n",
    "                #batch_size=128,\n",
    "                batch_size=16,\n",
    "                shuffle=True,\n",
    "                validation_data=(x_test, x_test),\n",
    "                callbacks=[TensorBoard(log_dir='/tmp/autoencoder')])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# comparando imagem original e reconstrucao"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 18 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "decoded_imgs = autoencoder.predict(x_test)\n",
    "\n",
    "n = 10\n",
    "plt.figure(figsize=(20, 4))\n",
    "for i in range(1,n):\n",
    "\n",
    "    ax = plt.subplot(2, n, i)\n",
    "    plt.imshow(x_test[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "\n",
    "    ax = plt.subplot(2, n, i + n)\n",
    "    plt.imshow(decoded_imgs[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Incluindo ruido na imagem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import mnist\n",
    "import numpy as np\n",
    "\n",
    "(x_train, _), (x_test, _) = mnist.load_data()\n",
    "\n",
    "x_train = x_train.astype('float32') / 255.\n",
    "x_test = x_test.astype('float32') / 255.\n",
    "x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))  # adapt this if using `channels_first` image data format\n",
    "x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))  # adapt this if using `channels_first` image data format\n",
    "\n",
    "noise_factor = 0.5\n",
    "x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \n",
    "x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n",
    "\n",
    "x_train_noisy = np.clip(x_train_noisy, 0., 1.)\n",
    "x_test_noisy = np.clip(x_test_noisy, 0., 1.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Limpeza de ruídos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x144 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 10\n",
    "plt.figure(figsize=(20, 2))\n",
    "for i in range(1,n):\n",
    "    ax = plt.subplot(1, n, i)\n",
    "    plt.imshow(x_test_noisy[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_img = Input(shape=(28, 28, 1))  \n",
    "\n",
    "x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\n",
    "x = MaxPooling2D((2, 2), padding='same')(x)\n",
    "x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\n",
    "encoded = MaxPooling2D((2, 2), padding='same')(x)\n",
    "\n",
    "\n",
    "x = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\n",
    "x = UpSampling2D((2, 2))(x)\n",
    "x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\n",
    "x = UpSampling2D((2, 2))(x)\n",
    "decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n",
    "\n",
    "autoencoder = Model(input_img, decoded)\n",
    "autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/100\n",
      "60000/60000 [==============================] - 5s 85us/sample - loss: 0.6836 - val_loss: 0.6670\n",
      "Epoch 2/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.6406 - val_loss: 0.6080\n",
      "Epoch 3/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.5620 - val_loss: 0.5238\n",
      "Epoch 4/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.5057 - val_loss: 0.5008\n",
      "Epoch 5/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.4927 - val_loss: 0.4919\n",
      "Epoch 6/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.4840 - val_loss: 0.4832\n",
      "Epoch 7/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.4749 - val_loss: 0.4734\n",
      "Epoch 8/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.4642 - val_loss: 0.4615\n",
      "Epoch 9/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.4520 - val_loss: 0.4488\n",
      "Epoch 10/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.4386 - val_loss: 0.4343\n",
      "Epoch 11/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.4232 - val_loss: 0.4174\n",
      "Epoch 12/100\n",
      "60000/60000 [==============================] - 5s 77us/sample - loss: 0.4051 - val_loss: 0.3974\n",
      "Epoch 13/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.3835 - val_loss: 0.3734\n",
      "Epoch 14/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.3585 - val_loss: 0.3473\n",
      "Epoch 15/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.3329 - val_loss: 0.3217\n",
      "Epoch 16/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.3089 - val_loss: 0.2989\n",
      "Epoch 17/100\n",
      "60000/60000 [==============================] - 4s 70us/sample - loss: 0.2884 - val_loss: 0.2801\n",
      "Epoch 18/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.2717 - val_loss: 0.2649\n",
      "Epoch 19/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.2582 - val_loss: 0.2525\n",
      "Epoch 20/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2473 - val_loss: 0.2424\n",
      "Epoch 21/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2382 - val_loss: 0.2341\n",
      "Epoch 22/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2307 - val_loss: 0.2270\n",
      "Epoch 23/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.2243 - val_loss: 0.2211\n",
      "Epoch 24/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2189 - val_loss: 0.2160\n",
      "Epoch 25/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.2142 - val_loss: 0.2115\n",
      "Epoch 26/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2101 - val_loss: 0.2076\n",
      "Epoch 27/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2064 - val_loss: 0.2042\n",
      "Epoch 28/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.2032 - val_loss: 0.2010\n",
      "Epoch 29/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.2002 - val_loss: 0.1982\n",
      "Epoch 30/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1975 - val_loss: 0.1956\n",
      "Epoch 31/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1951 - val_loss: 0.1932\n",
      "Epoch 32/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1928 - val_loss: 0.1910\n",
      "Epoch 33/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1907 - val_loss: 0.1890\n",
      "Epoch 34/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1888 - val_loss: 0.1871\n",
      "Epoch 35/100\n",
      "60000/60000 [==============================] - 5s 77us/sample - loss: 0.1870 - val_loss: 0.1854\n",
      "Epoch 36/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1853 - val_loss: 0.1837\n",
      "Epoch 37/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1838 - val_loss: 0.1822\n",
      "Epoch 38/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1823 - val_loss: 0.1808\n",
      "Epoch 39/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1810 - val_loss: 0.1795\n",
      "Epoch 40/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1797 - val_loss: 0.1782\n",
      "Epoch 41/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1785 - val_loss: 0.1770\n",
      "Epoch 42/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1773 - val_loss: 0.1759\n",
      "Epoch 43/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1762 - val_loss: 0.1748\n",
      "Epoch 44/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1752 - val_loss: 0.1738\n",
      "Epoch 45/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1742 - val_loss: 0.1728\n",
      "Epoch 46/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1732 - val_loss: 0.1719\n",
      "Epoch 47/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1723 - val_loss: 0.1710\n",
      "Epoch 48/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1714 - val_loss: 0.1701\n",
      "Epoch 49/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1706 - val_loss: 0.1693\n",
      "Epoch 50/100\n",
      "60000/60000 [==============================] - 4s 74us/sample - loss: 0.1698 - val_loss: 0.1685\n",
      "Epoch 51/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1690 - val_loss: 0.1677\n",
      "Epoch 52/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1682 - val_loss: 0.1670\n",
      "Epoch 53/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1675 - val_loss: 0.1663\n",
      "Epoch 54/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1668 - val_loss: 0.1656\n",
      "Epoch 55/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1661 - val_loss: 0.1649\n",
      "Epoch 56/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1655 - val_loss: 0.1643\n",
      "Epoch 57/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1649 - val_loss: 0.1637\n",
      "Epoch 58/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1642 - val_loss: 0.1630\n",
      "Epoch 59/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1636 - val_loss: 0.1625\n",
      "Epoch 60/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1631 - val_loss: 0.1619\n",
      "Epoch 61/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1625 - val_loss: 0.1613\n",
      "Epoch 62/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1619 - val_loss: 0.1608\n",
      "Epoch 63/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1614 - val_loss: 0.1602\n",
      "Epoch 64/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1609 - val_loss: 0.1597\n",
      "Epoch 65/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1604 - val_loss: 0.1592\n",
      "Epoch 66/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1599 - val_loss: 0.1587\n",
      "Epoch 67/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1594 - val_loss: 0.1582\n",
      "Epoch 68/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1589 - val_loss: 0.1577\n",
      "Epoch 69/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1584 - val_loss: 0.1573\n",
      "Epoch 70/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1579 - val_loss: 0.1568\n",
      "Epoch 71/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1575 - val_loss: 0.1563\n",
      "Epoch 72/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1570 - val_loss: 0.1559\n",
      "Epoch 73/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1566 - val_loss: 0.1554\n",
      "Epoch 74/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1561 - val_loss: 0.1550\n",
      "Epoch 75/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1557 - val_loss: 0.1546\n",
      "Epoch 76/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1553 - val_loss: 0.1541\n",
      "Epoch 77/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1549 - val_loss: 0.1537\n",
      "Epoch 78/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1545 - val_loss: 0.1533\n",
      "Epoch 79/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1541 - val_loss: 0.1529\n",
      "Epoch 80/100\n",
      "60000/60000 [==============================] - 4s 70us/sample - loss: 0.1537 - val_loss: 0.1525\n",
      "Epoch 81/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1533 - val_loss: 0.1521\n",
      "Epoch 82/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1529 - val_loss: 0.1517\n",
      "Epoch 83/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1525 - val_loss: 0.1513\n",
      "Epoch 84/100\n",
      "60000/60000 [==============================] - 4s 74us/sample - loss: 0.1521 - val_loss: 0.1510\n",
      "Epoch 85/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1517 - val_loss: 0.1506\n",
      "Epoch 86/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1514 - val_loss: 0.1502\n",
      "Epoch 87/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1510 - val_loss: 0.1498\n",
      "Epoch 88/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1506 - val_loss: 0.1495\n",
      "Epoch 89/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1503 - val_loss: 0.1491\n",
      "Epoch 90/100\n",
      "60000/60000 [==============================] - 4s 71us/sample - loss: 0.1499 - val_loss: 0.1488\n",
      "Epoch 91/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1496 - val_loss: 0.1484\n",
      "Epoch 92/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1493 - val_loss: 0.1481\n",
      "Epoch 93/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1489 - val_loss: 0.1477\n",
      "Epoch 94/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1486 - val_loss: 0.1474\n",
      "Epoch 95/100\n",
      "60000/60000 [==============================] - 5s 75us/sample - loss: 0.1482 - val_loss: 0.1471\n",
      "Epoch 96/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1479 - val_loss: 0.1467\n",
      "Epoch 97/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1476 - val_loss: 0.1464\n",
      "Epoch 98/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1473 - val_loss: 0.1461\n",
      "Epoch 99/100\n",
      "60000/60000 [==============================] - 4s 73us/sample - loss: 0.1469 - val_loss: 0.1458\n",
      "Epoch 100/100\n",
      "60000/60000 [==============================] - 4s 72us/sample - loss: 0.1466 - val_loss: 0.1455\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f352cac8160>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "autoencoder.fit(x_train_noisy, x_train,\n",
    "                epochs=100,\n",
    "                batch_size=128,\n",
    "                shuffle=True,\n",
    "                validation_data=(x_test_noisy, x_test),\n",
    "                callbacks=[TensorBoard(log_dir='/tmp/tb', histogram_freq=0, write_graph=False)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predição das imagens com ruídos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x288 with 18 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "decoded_imgs = autoencoder.predict(x_test_noisy)\n",
    "\n",
    "n = 10\n",
    "plt.figure(figsize=(20, 4))\n",
    "for i in range(1,n):\n",
    "    #  original\n",
    "    ax = plt.subplot(2, n, i)\n",
    "    plt.imshow(x_test_noisy[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "\n",
    "    # reconstrucao\n",
    "    ax = plt.subplot(2, n, i + n)\n",
    "    plt.imshow(decoded_imgs[i].reshape(28, 28))\n",
    "    plt.gray()\n",
    "    ax.get_xaxis().set_visible(False)\n",
    "    ax.get_yaxis().set_visible(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Autoencoder e sequencias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# definindo a sequencia\n",
    "sequence = array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n",
    "# reshape input into [samples, timesteps, features]\n",
    "n_in = len(sequence)\n",
    "sequence = sequence.reshape((1, n_in, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.1],\n",
       "        [0.2],\n",
       "        [0.3],\n",
       "        [0.4],\n",
       "        [0.5],\n",
       "        [0.6],\n",
       "        [0.7],\n",
       "        [0.8],\n",
       "        [0.9]]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sequence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Camadas de reshape keras\n",
    "* RepeatVector\n",
    "* TimeDistributed aplica cada elemento da sequencia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input 0 is incompatible with layer lstm_8: expected ndim=3, found ndim=2",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-25-612e5aeec925>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_in\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#model.add(RepeatVector(n_in))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLSTM\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturn_sequences\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;31m#model.add(TimeDistributed(Dense(1)))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'adam'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mse'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/keras/engine/sequential.py\u001b[0m in \u001b[0;36madd\u001b[0;34m(self, layer)\u001b[0m\n\u001b[1;32m    180\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnetwork\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_source_inputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m             \u001b[0moutput_tensor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_tensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m                 raise TypeError('All layers in a Sequential model '\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/keras/layers/recurrent.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, initial_state, constants, **kwargs)\u001b[0m\n\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minitial_state\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mconstants\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mRNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    543\u001b[0m         \u001b[0;31m# If any of `initial_state` or `constants` are specified and are Keras\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36msymbolic_fn_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0m_SYMBOLIC_SCOPE\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mget_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_default\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/keras/engine/base_layer.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs, **kwargs)\u001b[0m\n\u001b[1;32m    444\u001b[0m                 \u001b[0;31m# Raise exceptions in case the input is not compatible\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    445\u001b[0m                 \u001b[0;31m# with the input_spec specified in the layer constructor.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 446\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0massert_input_compatibility\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    447\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    448\u001b[0m                 \u001b[0;31m# Collect input shapes to build layer.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/DL/lib/python3.7/site-packages/keras/engine/base_layer.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m    340\u001b[0m                                      \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m': expected ndim='\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                                      \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m', found ndim='\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 342\u001b[0;31m                                      str(K.ndim(x)))\n\u001b[0m\u001b[1;32m    343\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_ndim\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m                 \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Input 0 is incompatible with layer lstm_8: expected ndim=3, found ndim=2"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(LSTM(100, activation='relu', input_shape=(n_in,1)))\n",
    "model.add(RepeatVector(n_in))\n",
    "model.add(LSTM(100, activation='relu', return_sequences=True))\n",
    "model.add(TimeDistributed(Dense(1)))\n",
    "model.compile(optimizer='adam', loss='mse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x7f3d2a0fbc88>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(sequence, sequence, epochs=300, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.10555339 0.20064096 0.29860294 0.3985242  0.49963367 0.60063833\n",
      " 0.7009275  0.80046225 0.8993599 ]\n"
     ]
    }
   ],
   "source": [
    "plot_model(model, show_shapes=True, to_file='reconstruct_lstm_autoencoder.png')\n",
    "\n",
    "yhat = model.predict(sequence, verbose=0)\n",
    "print(yhat[0,:,0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# testando predicao com lstm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "seq_in = array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n",
    "\n",
    "n_in = len(seq_in)\n",
    "#sequencia de entrada\n",
    "seq_in = seq_in.reshape((1, n_in, 1))\n",
    "# sequencia de saida\n",
    "seq_out = seq_in[:, 1:, :]\n",
    "n_out = n_in - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[0.1]\n",
      "  [0.2]\n",
      "  [0.3]\n",
      "  [0.4]\n",
      "  [0.5]\n",
      "  [0.6]\n",
      "  [0.7]\n",
      "  [0.8]\n",
      "  [0.9]]]\n",
      "[[[0.2]\n",
      "  [0.3]\n",
      "  [0.4]\n",
      "  [0.5]\n",
      "  [0.6]\n",
      "  [0.7]\n",
      "  [0.8]\n",
      "  [0.9]]]\n"
     ]
    }
   ],
   "source": [
    "print(seq_in)\n",
    "print(seq_out)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x7f9dacf0a630>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(LSTM(100, activation='relu', input_shape=(n_in,1)))\n",
    "model.add(RepeatVector(n_out))\n",
    "model.add(LSTM(100, activation='relu', return_sequences=True))\n",
    "model.add(TimeDistributed(Dense(1)))\n",
    "\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "plot_model(model, show_shapes=True, to_file='predict_lstm_autoencoder.png')\n",
    "# fit model\n",
    "model.fit(seq_in, seq_out, epochs=300, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.16898128 0.29317504 0.4047082  0.50685155 0.60325843 0.6991407\n",
      " 0.7975662  0.9011478 ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "yhat = model.predict(seq_in, verbose=0)\n",
    "print(yhat[0,:,0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.16898128],\n",
       "        [0.29317504],\n",
       "        [0.4047082 ],\n",
       "        [0.50685155],\n",
       "        [0.60325843],\n",
       "        [0.6991407 ],\n",
       "        [0.7975662 ],\n",
       "        [0.9011478 ]]], dtype=float32)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Um encoder e dois decoders\n",
    "* O primeiro reconstroi a sequencia\n",
    "* O segundo realiza a predição do próximo item da sequência"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "seq_in = array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n",
    "\n",
    "n_in = len(seq_in)\n",
    "seq_in = seq_in.reshape((1, n_in, 1))\n",
    "\n",
    "seq_out = seq_in[:, 1:, :]\n",
    "n_out = n_in - 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.callbacks.History at 0x7f9da0b44470>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# encoder\n",
    "visible = Input(shape=(n_in,1))\n",
    "encoder = LSTM(100, activation='relu')(visible)\n",
    "#  reconstruct decoder\n",
    "decoder1 = RepeatVector(n_in)(encoder)\n",
    "decoder1 = LSTM(100, activation='relu', return_sequences=True)(decoder1)\n",
    "decoder1 = TimeDistributed(Dense(1))(decoder1)\n",
    "#  predict decoder\n",
    "decoder2 = RepeatVector(n_out)(encoder)\n",
    "decoder2 = LSTM(100, activation='relu', return_sequences=True)(decoder2)\n",
    "decoder2 = TimeDistributed(Dense(1))(decoder2)\n",
    "\n",
    "model = Model(inputs=visible, outputs=[decoder1, decoder2])\n",
    "model.compile(optimizer='adam', loss='mse')\n",
    "plot_model(model, show_shapes=True, to_file='composite_lstm_autoencoder.png')\n",
    "\n",
    "model.fit(seq_in, [seq_in,seq_out], epochs=300, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A predição do modelo retornar uma sequencia gerada e a predicao dos próximos elementos da sequencia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([[[0.11307444],\n",
      "        [0.20880575],\n",
      "        [0.3041575 ],\n",
      "        [0.3997227 ],\n",
      "        [0.49616152],\n",
      "        [0.5942036 ],\n",
      "        [0.69465923],\n",
      "        [0.79844   ],\n",
      "        [0.906588  ]]], dtype=float32), array([[[0.169982  ],\n",
      "        [0.29568958],\n",
      "        [0.40717572],\n",
      "        [0.50765383],\n",
      "        [0.6028927 ],\n",
      "        [0.6975492 ],\n",
      "        [0.79587805],\n",
      "        [0.9022094 ]]], dtype=float32)]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "yhat = model.predict(seq_in, verbose=0)\n",
    "print(yhat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Criando auto encoder com backend\n",
    "* teste com base de faces"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1213, 62, 47) (1213,) (135, 62, 47) (135,)\n"
     ]
    }
   ],
   "source": [
    "faces = fetch_lfw_people(min_faces_per_person=60)\n",
    "#print(faces.target_names)\n",
    "#print(faces.images.shape)\n",
    "#print(faces.data.shape)\n",
    "\n",
    "x_train, x_test ,y_train,y_test = train_test_split(faces.images, faces.target, random_state=0, test_size=0.10)\n",
    "\n",
    "print(x_train.shape,y_train.shape, x_test.shape,y_test.shape)\n",
    "x_train=x_train.reshape(1213, 2914)\n",
    "x_test=x_test.reshape(135, 2914)\n",
    "#x_train=x_train.reshape(1213, 62,47,1)\n",
    "#x_test=x_test.reshape(135, 62,47,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(40, 2914)\n",
      "(10, 2914)\n",
      "(40,)\n",
      "(10,)\n"
     ]
    }
   ],
   "source": [
    "x_train=x_train[:40]\n",
    "print(x_train.shape)\n",
    "x_test=x_test[:10]\n",
    "print(x_test.shape)\n",
    "\n",
    "y_train=y_train[:40]\n",
    "print(y_train.shape)\n",
    "y_test=y_test[:10]\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Criando uma classe para autoencoder autoencoder MLP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FacesAutoencoder:\n",
    "\n",
    "    def __init__(self, latent_space, input_shape):\n",
    "\n",
    "        self._latent_space = latent_space\n",
    "        self._input_shape = input_shape\n",
    "\n",
    "        self._encoder = None\n",
    "        self._decoder = None\n",
    "        self._autoencoder = None\n",
    "        self._configure_network()\n",
    "\n",
    "    def _configure_network(self):\n",
    "        encoder_input = inputs = Input(shape=(self._input_shape,))\n",
    "        encoder_output = Dense(self._latent_space)(encoder_input)\n",
    "\n",
    "        decoder_input = Dense(256, activation=\"relu\", input_shape=(self._latent_space,) )(encoder_output)\n",
    "        decoder_output = Dense(input_shape, activation=\"sigmoid\")(decoder_input)\n",
    "        \n",
    "        self._autoencoder = Model(encoder_input, decoder_output)\n",
    "        self._encoder = Model(encoder_input, encoder_output)\n",
    "        #print( self._autoencoder.summary())\n",
    "\n",
    "        self._autoencoder.compile(optimizer=\"Adam\", loss=\"mse\", metrics=[\"accuracy\"])\n",
    "\n",
    "    def encode(self, X):\n",
    "        return self._encoder.predict(X)\n",
    "\n",
    "    def predict(self, X):\n",
    "        return self._autoencoder.predict(X)\n",
    "\n",
    "    def fit(self, X, epochs, ):\n",
    "        for epoch in range(epochs):\n",
    "            print(' epoch ', epoch)\n",
    "            losses = []\n",
    "            random.shuffle(X)\n",
    "            for element in X:\n",
    "                #print('element ' , element.shape)\n",
    "                el=element.reshape(1,2914)\n",
    "                loss = self._autoencoder.fit(el, el, epochs=1, verbose=0).history['loss'][0]\n",
    "                losses.append(loss)\n",
    "\n",
    "    def decode(self, X): #, timesteps):\n",
    "        return Decoder(self._autoencoder, self._latent_space).predict(X)#, timesteps)\n",
    "\n",
    "class Decoder:\n",
    "\n",
    "    def __init__(self, autoencoder, latent_space):\n",
    "\n",
    "        self._autoencoder = autoencoder\n",
    "        self._latent_space = latent_space\n",
    "\n",
    "    def predict(self, X):\n",
    "        decoder_input = Input(shape=(self._latent_space,))\n",
    "\n",
    "        decoder_repeated_input = (decoder_input)\n",
    "        decoder = self._autoencoder.layers[-1](decoder_repeated_input)\n",
    "        decoder = Model(decoder_input, decoder)\n",
    "\n",
    "        return decoder.predict(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(40, 2914)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# GErando apenas o espaço latente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " epoch  0\n",
      " epoch  1\n",
      " epoch  2\n",
      " epoch  3\n",
      " epoch  4\n",
      " epoch  5\n",
      " epoch  6\n",
      " epoch  7\n",
      " epoch  8\n",
      " epoch  9\n",
      " epoch  10\n",
      " epoch  11\n",
      " epoch  12\n",
      " epoch  13\n",
      " epoch  14\n",
      " epoch  15\n",
      " epoch  16\n",
      " epoch  17\n",
      " epoch  18\n",
      " epoch  19\n",
      " epoch  20\n",
      " epoch  21\n",
      " epoch  22\n",
      " epoch  23\n",
      " epoch  24\n",
      " epoch  25\n",
      " epoch  26\n",
      " epoch  27\n",
      " epoch  28\n",
      " epoch  29\n",
      " epoch  30\n",
      " epoch  31\n",
      " epoch  32\n",
      " epoch  33\n",
      " epoch  34\n",
      " epoch  35\n",
      " epoch  36\n",
      " epoch  37\n",
      " epoch  38\n",
      " epoch  39\n",
      " epoch  40\n",
      " epoch  41\n",
      " epoch  42\n",
      " epoch  43\n",
      " epoch  44\n",
      " epoch  45\n",
      " epoch  46\n",
      " epoch  47\n",
      " epoch  48\n",
      " epoch  49\n",
      " epoch  50\n",
      " epoch  51\n",
      " epoch  52\n",
      " epoch  53\n",
      " epoch  54\n",
      " epoch  55\n",
      " epoch  56\n",
      " epoch  57\n",
      " epoch  58\n",
      " epoch  59\n",
      " epoch  60\n",
      " epoch  61\n",
      " epoch  62\n",
      " epoch  63\n",
      " epoch  64\n",
      " epoch  65\n",
      " epoch  66\n",
      " epoch  67\n",
      " epoch  68\n",
      " epoch  69\n",
      " epoch  70\n",
      " epoch  71\n",
      " epoch  72\n",
      " epoch  73\n",
      " epoch  74\n",
      " epoch  75\n",
      " epoch  76\n",
      " epoch  77\n",
      " epoch  78\n",
      " epoch  79\n",
      " epoch  80\n",
      " epoch  81\n",
      " epoch  82\n",
      " epoch  83\n",
      " epoch  84\n",
      " epoch  85\n",
      " epoch  86\n",
      " epoch  87\n",
      " epoch  88\n",
      " epoch  89\n",
      " epoch  90\n",
      " epoch  91\n",
      " epoch  92\n",
      " epoch  93\n",
      " epoch  94\n",
      " epoch  95\n",
      " epoch  96\n",
      " epoch  97\n",
      " epoch  98\n",
      " epoch  99\n",
      " epoch  100\n",
      " epoch  101\n",
      " epoch  102\n",
      " epoch  103\n",
      " epoch  104\n",
      " epoch  105\n",
      " epoch  106\n",
      " epoch  107\n",
      " epoch  108\n",
      " epoch  109\n",
      " epoch  110\n",
      " epoch  111\n",
      " epoch  112\n",
      " epoch  113\n",
      " epoch  114\n",
      " epoch  115\n",
      " epoch  116\n",
      " epoch  117\n",
      " epoch  118\n",
      " epoch  119\n",
      " epoch  120\n",
      " epoch  121\n",
      " epoch  122\n",
      " epoch  123\n",
      " epoch  124\n",
      " epoch  125\n",
      " epoch  126\n",
      " epoch  127\n",
      " epoch  128\n",
      " epoch  129\n",
      " epoch  130\n",
      " epoch  131\n",
      " epoch  132\n",
      " epoch  133\n",
      " epoch  134\n",
      " epoch  135\n",
      " epoch  136\n",
      " epoch  137\n",
      " epoch  138\n",
      " epoch  139\n",
      " epoch  140\n",
      " epoch  141\n",
      " epoch  142\n",
      " epoch  143\n",
      " epoch  144\n",
      " epoch  145\n",
      " epoch  146\n",
      " epoch  147\n",
      " epoch  148\n",
      " epoch  149\n",
      " epoch  150\n",
      " epoch  151\n",
      " epoch  152\n",
      " epoch  153\n",
      " epoch  154\n",
      " epoch  155\n",
      " epoch  156\n",
      " epoch  157\n",
      " epoch  158\n",
      " epoch  159\n",
      " epoch  160\n",
      " epoch  161\n",
      " epoch  162\n",
      " epoch  163\n",
      " epoch  164\n",
      " epoch  165\n",
      " epoch  166\n",
      " epoch  167\n",
      " epoch  168\n",
      " epoch  169\n",
      " epoch  170\n",
      " epoch  171\n",
      " epoch  172\n",
      " epoch  173\n",
      " epoch  174\n",
      " epoch  175\n",
      " epoch  176\n",
      " epoch  177\n",
      " epoch  178\n",
      " epoch  179\n",
      " epoch  180\n",
      " epoch  181\n",
      " epoch  182\n",
      " epoch  183\n",
      " epoch  184\n",
      " epoch  185\n",
      " epoch  186\n",
      " epoch  187\n",
      " epoch  188\n",
      " epoch  189\n",
      " epoch  190\n",
      " epoch  191\n",
      " epoch  192\n",
      " epoch  193\n",
      " epoch  194\n",
      " epoch  195\n",
      " epoch  196\n",
      " epoch  197\n",
      " epoch  198\n",
      " epoch  199\n",
      " epoch  200\n",
      " epoch  201\n",
      " epoch  202\n",
      " epoch  203\n",
      " epoch  204\n",
      " epoch  205\n",
      " epoch  206\n",
      " epoch  207\n",
      " epoch  208\n",
      " epoch  209\n",
      " epoch  210\n",
      " epoch  211\n",
      " epoch  212\n",
      " epoch  213\n",
      " epoch  214\n",
      " epoch  215\n",
      " epoch  216\n",
      " epoch  217\n",
      " epoch  218\n",
      " epoch  219\n",
      " epoch  220\n",
      " epoch  221\n",
      " epoch  222\n",
      " epoch  223\n",
      " epoch  224\n",
      " epoch  225\n",
      " epoch  226\n",
      " epoch  227\n",
      " epoch  228\n",
      " epoch  229\n",
      " epoch  230\n",
      " epoch  231\n",
      " epoch  232\n",
      " epoch  233\n",
      " epoch  234\n",
      " epoch  235\n",
      " epoch  236\n",
      " epoch  237\n",
      " epoch  238\n",
      " epoch  239\n",
      " epoch  240\n",
      " epoch  241\n",
      " epoch  242\n",
      " epoch  243\n",
      " epoch  244\n",
      " epoch  245\n",
      " epoch  246\n",
      " epoch  247\n",
      " epoch  248\n",
      " epoch  249\n",
      " epoch  250\n",
      " epoch  251\n",
      " epoch  252\n",
      " epoch  253\n",
      " epoch  254\n",
      " epoch  255\n",
      " epoch  256\n",
      " epoch  257\n",
      " epoch  258\n",
      " epoch  259\n",
      " epoch  260\n",
      " epoch  261\n",
      " epoch  262\n",
      " epoch  263\n",
      " epoch  264\n",
      " epoch  265\n",
      " epoch  266\n",
      " epoch  267\n",
      " epoch  268\n",
      " epoch  269\n",
      " epoch  270\n",
      " epoch  271\n",
      " epoch  272\n",
      " epoch  273\n",
      " epoch  274\n",
      " epoch  275\n",
      " epoch  276\n",
      " epoch  277\n",
      " epoch  278\n",
      " epoch  279\n",
      " epoch  280\n",
      " epoch  281\n",
      " epoch  282\n",
      " epoch  283\n",
      " epoch  284\n",
      " epoch  285\n",
      " epoch  286\n",
      " epoch  287\n",
      " epoch  288\n",
      " epoch  289\n",
      " epoch  290\n",
      " epoch  291\n",
      " epoch  292\n",
      " epoch  293\n",
      " epoch  294\n",
      " epoch  295\n",
      " epoch  296\n",
      " epoch  297\n",
      " epoch  298\n",
      " epoch  299\n",
      " epoch  300\n",
      " epoch  301\n",
      " epoch  302\n",
      " epoch  303\n",
      " epoch  304\n",
      " epoch  305\n",
      " epoch  306\n",
      " epoch  307\n",
      " epoch  308\n",
      " epoch  309\n",
      " epoch  310\n",
      " epoch  311\n",
      " epoch  312\n",
      " epoch  313\n",
      " epoch  314\n",
      " epoch  315\n",
      " epoch  316\n",
      " epoch  317\n",
      " epoch  318\n",
      " epoch  319\n",
      " epoch  320\n",
      " epoch  321\n",
      " epoch  322\n",
      " epoch  323\n",
      " epoch  324\n",
      " epoch  325\n",
      " epoch  326\n",
      " epoch  327\n",
      " epoch  328\n",
      " epoch  329\n",
      " epoch  330\n",
      " epoch  331\n",
      " epoch  332\n",
      " epoch  333\n",
      " epoch  334\n",
      " epoch  335\n",
      " epoch  336\n",
      " epoch  337\n",
      " epoch  338\n",
      " epoch  339\n",
      " epoch  340\n",
      " epoch  341\n",
      " epoch  342\n",
      " epoch  343\n",
      " epoch  344\n",
      " epoch  345\n",
      " epoch  346\n",
      " epoch  347\n",
      " epoch  348\n",
      " epoch  349\n",
      " epoch  350\n",
      " epoch  351\n",
      " epoch  352\n",
      " epoch  353\n",
      " epoch  354\n",
      " epoch  355\n",
      " epoch  356\n",
      " epoch  357\n",
      " epoch  358\n",
      " epoch  359\n",
      " epoch  360\n",
      " epoch  361\n",
      " epoch  362\n",
      " epoch  363\n",
      " epoch  364\n",
      " epoch  365\n",
      " epoch  366\n",
      " epoch  367\n",
      " epoch  368\n",
      " epoch  369\n",
      " epoch  370\n",
      " epoch  371\n",
      " epoch  372\n",
      " epoch  373\n",
      " epoch  374\n",
      " epoch  375\n",
      " epoch  376\n",
      " epoch  377\n",
      " epoch  378\n",
      " epoch  379\n",
      " epoch  380\n",
      " epoch  381\n",
      " epoch  382\n",
      " epoch  383\n",
      " epoch  384\n",
      " epoch  385\n",
      " epoch  386\n",
      " epoch  387\n",
      " epoch  388\n",
      " epoch  389\n",
      " epoch  390\n",
      " epoch  391\n",
      " epoch  392\n",
      " epoch  393\n",
      " epoch  394\n",
      " epoch  395\n",
      " epoch  396\n",
      " epoch  397\n",
      " epoch  398\n",
      " epoch  399\n",
      " epoch  400\n",
      " epoch  401\n",
      " epoch  402\n",
      " epoch  403\n",
      " epoch  404\n",
      " epoch  405\n",
      " epoch  406\n",
      " epoch  407\n",
      " epoch  408\n",
      " epoch  409\n",
      " epoch  410\n",
      " epoch  411\n",
      " epoch  412\n",
      " epoch  413\n",
      " epoch  414\n",
      " epoch  415\n",
      " epoch  416\n",
      " epoch  417\n",
      " epoch  418\n",
      " epoch  419\n",
      " epoch  420\n",
      " epoch  421\n",
      " epoch  422\n",
      " epoch  423\n",
      " epoch  424\n",
      " epoch  425\n",
      " epoch  426\n",
      " epoch  427\n",
      " epoch  428\n",
      " epoch  429\n",
      " epoch  430\n",
      " epoch  431\n",
      " epoch  432\n",
      " epoch  433\n",
      " epoch  434\n",
      " epoch  435\n",
      " epoch  436\n",
      " epoch  437\n",
      " epoch  438\n",
      " epoch  439\n",
      " epoch  440\n",
      " epoch  441\n",
      " epoch  442\n",
      " epoch  443\n",
      " epoch  444\n",
      " epoch  445\n",
      " epoch  446\n",
      " epoch  447\n",
      " epoch  448\n",
      " epoch  449\n",
      " epoch  450\n",
      " epoch  451\n",
      " epoch  452\n",
      " epoch  453\n",
      " epoch  454\n",
      " epoch  455\n",
      " epoch  456\n",
      " epoch  457\n",
      " epoch  458\n",
      " epoch  459\n",
      " epoch  460\n",
      " epoch  461\n",
      " epoch  462\n",
      " epoch  463\n",
      " epoch  464\n",
      " epoch  465\n",
      " epoch  466\n",
      " epoch  467\n",
      " epoch  468\n",
      " epoch  469\n",
      " epoch  470\n",
      " epoch  471\n",
      " epoch  472\n",
      " epoch  473\n",
      " epoch  474\n",
      " epoch  475\n",
      " epoch  476\n",
      " epoch  477\n",
      " epoch  478\n",
      " epoch  479\n",
      " epoch  480\n",
      " epoch  481\n",
      " epoch  482\n",
      " epoch  483\n",
      " epoch  484\n",
      " epoch  485\n",
      " epoch  486\n",
      " epoch  487\n",
      " epoch  488\n",
      " epoch  489\n",
      " epoch  490\n",
      " epoch  491\n",
      " epoch  492\n",
      " epoch  493\n",
      " epoch  494\n",
      " epoch  495\n",
      " epoch  496\n",
      " epoch  497\n",
      " epoch  498\n",
      " epoch  499\n",
      " epoch  500\n",
      " epoch  501\n",
      " epoch  502\n",
      " epoch  503\n",
      " epoch  504\n",
      " epoch  505\n",
      " epoch  506\n",
      " epoch  507\n",
      " epoch  508\n",
      " epoch  509\n",
      " epoch  510\n",
      " epoch  511\n",
      " epoch  512\n",
      " epoch  513\n",
      " epoch  514\n",
      " epoch  515\n",
      " epoch  516\n",
      " epoch  517\n",
      " epoch  518\n",
      " epoch  519\n",
      " epoch  520\n",
      " epoch  521\n",
      " epoch  522\n",
      " epoch  523\n",
      " epoch  524\n",
      " epoch  525\n",
      " epoch  526\n",
      " epoch  527\n",
      " epoch  528\n",
      " epoch  529\n",
      " epoch  530\n",
      " epoch  531\n",
      " epoch  532\n",
      " epoch  533\n",
      " epoch  534\n",
      " epoch  535\n",
      " epoch  536\n",
      " epoch  537\n",
      " epoch  538\n",
      " epoch  539\n",
      " epoch  540\n",
      " epoch  541\n",
      " epoch  542\n",
      " epoch  543\n",
      " epoch  544\n",
      " epoch  545\n",
      " epoch  546\n",
      " epoch  547\n",
      " epoch  548\n",
      " epoch  549\n",
      " epoch  550\n",
      " epoch  551\n",
      " epoch  552\n",
      " epoch  553\n",
      " epoch  554\n",
      " epoch  555\n",
      " epoch  556\n",
      " epoch  557\n",
      " epoch  558\n",
      " epoch  559\n",
      " epoch  560\n",
      " epoch  561\n",
      " epoch  562\n",
      " epoch  563\n",
      " epoch  564\n",
      " epoch  565\n",
      " epoch  566\n",
      " epoch  567\n",
      " epoch  568\n",
      " epoch  569\n",
      " epoch  570\n",
      " epoch  571\n",
      " epoch  572\n",
      " epoch  573\n",
      " epoch  574\n",
      " epoch  575\n",
      " epoch  576\n",
      " epoch  577\n",
      " epoch  578\n",
      " epoch  579\n",
      " epoch  580\n",
      " epoch  581\n",
      " epoch  582\n",
      " epoch  583\n",
      " epoch  584\n",
      " epoch  585\n",
      " epoch  586\n",
      " epoch  587\n",
      " epoch  588\n",
      " epoch  589\n",
      " epoch  590\n",
      " epoch  591\n",
      " epoch  592\n",
      " epoch  593\n",
      " epoch  594\n",
      " epoch  595\n",
      " epoch  596\n",
      " epoch  597\n",
      " epoch  598\n",
      " epoch  599\n",
      " epoch  600\n",
      " epoch  601\n",
      " epoch  602\n",
      " epoch  603\n",
      " epoch  604\n",
      " epoch  605\n",
      " epoch  606\n",
      " epoch  607\n",
      " epoch  608\n",
      " epoch  609\n",
      " epoch  610\n",
      " epoch  611\n",
      " epoch  612\n",
      " epoch  613\n",
      " epoch  614\n",
      " epoch  615\n",
      " epoch  616\n",
      " epoch  617\n",
      " epoch  618\n",
      " epoch  619\n",
      " epoch  620\n",
      " epoch  621\n",
      " epoch  622\n",
      " epoch  623\n",
      " epoch  624\n",
      " epoch  625\n",
      " epoch  626\n",
      " epoch  627\n",
      " epoch  628\n",
      " epoch  629\n",
      " epoch  630\n",
      " epoch  631\n",
      " epoch  632\n",
      " epoch  633\n",
      " epoch  634\n",
      " epoch  635\n",
      " epoch  636\n",
      " epoch  637\n",
      " epoch  638\n",
      " epoch  639\n",
      " epoch  640\n",
      " epoch  641\n",
      " epoch  642\n",
      " epoch  643\n",
      " epoch  644\n",
      " epoch  645\n",
      " epoch  646\n",
      " epoch  647\n",
      " epoch  648\n",
      " epoch  649\n",
      " epoch  650\n",
      " epoch  651\n",
      " epoch  652\n",
      " epoch  653\n",
      " epoch  654\n",
      " epoch  655\n",
      " epoch  656\n",
      " epoch  657\n",
      " epoch  658\n",
      " epoch  659\n",
      " epoch  660\n",
      " epoch  661\n",
      " epoch  662\n",
      " epoch  663\n",
      " epoch  664\n",
      " epoch  665\n",
      " epoch  666\n",
      " epoch  667\n",
      " epoch  668\n",
      " epoch  669\n",
      " epoch  670\n",
      " epoch  671\n",
      " epoch  672\n",
      " epoch  673\n",
      " epoch  674\n",
      " epoch  675\n",
      " epoch  676\n",
      " epoch  677\n",
      " epoch  678\n",
      " epoch  679\n",
      " epoch  680\n",
      " epoch  681\n",
      " epoch  682\n",
      " epoch  683\n",
      " epoch  684\n",
      " epoch  685\n",
      " epoch  686\n",
      " epoch  687\n",
      " epoch  688\n",
      " epoch  689\n",
      " epoch  690\n",
      " epoch  691\n",
      " epoch  692\n",
      " epoch  693\n",
      " epoch  694\n",
      " epoch  695\n",
      " epoch  696\n",
      " epoch  697\n",
      " epoch  698\n",
      " epoch  699\n",
      " epoch  700\n",
      " epoch  701\n",
      " epoch  702\n",
      " epoch  703\n",
      " epoch  704\n",
      " epoch  705\n",
      " epoch  706\n",
      " epoch  707\n",
      " epoch  708\n",
      " epoch  709\n",
      " epoch  710\n",
      " epoch  711\n",
      " epoch  712\n",
      " epoch  713\n",
      " epoch  714\n",
      " epoch  715\n",
      " epoch  716\n",
      " epoch  717\n",
      " epoch  718\n",
      " epoch  719\n",
      " epoch  720\n",
      " epoch  721\n",
      " epoch  722\n",
      " epoch  723\n",
      " epoch  724\n",
      " epoch  725\n",
      " epoch  726\n",
      " epoch  727\n",
      " epoch  728\n",
      " epoch  729\n",
      " epoch  730\n",
      " epoch  731\n",
      " epoch  732\n",
      " epoch  733\n",
      " epoch  734\n",
      " epoch  735\n",
      " epoch  736\n",
      " epoch  737\n",
      " epoch  738\n",
      " epoch  739\n",
      " epoch  740\n",
      " epoch  741\n",
      " epoch  742\n",
      " epoch  743\n",
      " epoch  744\n",
      " epoch  745\n",
      " epoch  746\n",
      " epoch  747\n",
      " epoch  748\n",
      " epoch  749\n",
      " epoch  750\n",
      " epoch  751\n",
      " epoch  752\n",
      " epoch  753\n",
      " epoch  754\n",
      " epoch  755\n",
      " epoch  756\n",
      " epoch  757\n",
      " epoch  758\n",
      " epoch  759\n",
      " epoch  760\n",
      " epoch  761\n",
      " epoch  762\n",
      " epoch  763\n",
      " epoch  764\n",
      " epoch  765\n",
      " epoch  766\n",
      " epoch  767\n",
      " epoch  768\n",
      " epoch  769\n",
      " epoch  770\n",
      " epoch  771\n",
      " epoch  772\n",
      " epoch  773\n",
      " epoch  774\n",
      " epoch  775\n",
      " epoch  776\n",
      " epoch  777\n",
      " epoch  778\n",
      " epoch  779\n",
      " epoch  780\n",
      " epoch  781\n",
      " epoch  782\n",
      " epoch  783\n",
      " epoch  784\n",
      " epoch  785\n",
      " epoch  786\n",
      " epoch  787\n",
      " epoch  788\n",
      " epoch  789\n",
      " epoch  790\n",
      " epoch  791\n",
      " epoch  792\n",
      " epoch  793\n",
      " epoch  794\n",
      " epoch  795\n",
      " epoch  796\n",
      " epoch  797\n",
      " epoch  798\n",
      " epoch  799\n",
      " epoch  800\n",
      " epoch  801\n",
      " epoch  802\n",
      " epoch  803\n",
      " epoch  804\n",
      " epoch  805\n",
      " epoch  806\n",
      " epoch  807\n",
      " epoch  808\n",
      " epoch  809\n",
      " epoch  810\n",
      " epoch  811\n",
      " epoch  812\n",
      " epoch  813\n",
      " epoch  814\n",
      " epoch  815\n",
      " epoch  816\n",
      " epoch  817\n",
      " epoch  818\n",
      " epoch  819\n",
      " epoch  820\n",
      " epoch  821\n",
      " epoch  822\n",
      " epoch  823\n",
      " epoch  824\n",
      " epoch  825\n",
      " epoch  826\n",
      " epoch  827\n",
      " epoch  828\n",
      " epoch  829\n",
      " epoch  830\n",
      " epoch  831\n",
      " epoch  832\n",
      " epoch  833\n",
      " epoch  834\n",
      " epoch  835\n",
      " epoch  836\n",
      " epoch  837\n",
      " epoch  838\n",
      " epoch  839\n",
      " epoch  840\n",
      " epoch  841\n",
      " epoch  842\n",
      " epoch  843\n",
      " epoch  844\n",
      " epoch  845\n",
      " epoch  846\n",
      " epoch  847\n",
      " epoch  848\n",
      " epoch  849\n",
      " epoch  850\n",
      " epoch  851\n",
      " epoch  852\n",
      " epoch  853\n",
      " epoch  854\n",
      " epoch  855\n",
      " epoch  856\n",
      " epoch  857\n",
      " epoch  858\n",
      " epoch  859\n",
      " epoch  860\n",
      " epoch  861\n",
      " epoch  862\n",
      " epoch  863\n",
      " epoch  864\n",
      " epoch  865\n",
      " epoch  866\n",
      " epoch  867\n",
      " epoch  868\n",
      " epoch  869\n",
      " epoch  870\n",
      " epoch  871\n",
      " epoch  872\n",
      " epoch  873\n",
      " epoch  874\n",
      " epoch  875\n",
      " epoch  876\n",
      " epoch  877\n",
      " epoch  878\n",
      " epoch  879\n",
      " epoch  880\n",
      " epoch  881\n",
      " epoch  882\n",
      " epoch  883\n",
      " epoch  884\n",
      " epoch  885\n",
      " epoch  886\n",
      " epoch  887\n",
      " epoch  888\n",
      " epoch  889\n",
      " epoch  890\n",
      " epoch  891\n",
      " epoch  892\n",
      " epoch  893\n",
      " epoch  894\n",
      " epoch  895\n",
      " epoch  896\n",
      " epoch  897\n",
      " epoch  898\n",
      " epoch  899\n",
      " epoch  900\n",
      " epoch  901\n",
      " epoch  902\n",
      " epoch  903\n",
      " epoch  904\n",
      " epoch  905\n",
      " epoch  906\n",
      " epoch  907\n",
      " epoch  908\n",
      " epoch  909\n",
      " epoch  910\n",
      " epoch  911\n",
      " epoch  912\n",
      " epoch  913\n",
      " epoch  914\n",
      " epoch  915\n",
      " epoch  916\n",
      " epoch  917\n",
      " epoch  918\n",
      " epoch  919\n",
      " epoch  920\n",
      " epoch  921\n",
      " epoch  922\n",
      " epoch  923\n",
      " epoch  924\n",
      " epoch  925\n",
      " epoch  926\n",
      " epoch  927\n",
      " epoch  928\n",
      " epoch  929\n",
      " epoch  930\n",
      " epoch  931\n",
      " epoch  932\n",
      " epoch  933\n",
      " epoch  934\n",
      " epoch  935\n",
      " epoch  936\n",
      " epoch  937\n",
      " epoch  938\n",
      " epoch  939\n",
      " epoch  940\n",
      " epoch  941\n",
      " epoch  942\n",
      " epoch  943\n",
      " epoch  944\n",
      " epoch  945\n",
      " epoch  946\n",
      " epoch  947\n",
      " epoch  948\n",
      " epoch  949\n",
      " epoch  950\n",
      " epoch  951\n",
      " epoch  952\n",
      " epoch  953\n",
      " epoch  954\n",
      " epoch  955\n",
      " epoch  956\n",
      " epoch  957\n",
      " epoch  958\n",
      " epoch  959\n",
      " epoch  960\n",
      " epoch  961\n",
      " epoch  962\n",
      " epoch  963\n",
      " epoch  964\n",
      " epoch  965\n",
      " epoch  966\n",
      " epoch  967\n",
      " epoch  968\n",
      " epoch  969\n",
      " epoch  970\n",
      " epoch  971\n",
      " epoch  972\n",
      " epoch  973\n",
      " epoch  974\n",
      " epoch  975\n",
      " epoch  976\n",
      " epoch  977\n",
      " epoch  978\n",
      " epoch  979\n",
      " epoch  980\n",
      " epoch  981\n",
      " epoch  982\n",
      " epoch  983\n",
      " epoch  984\n",
      " epoch  985\n",
      " epoch  986\n",
      " epoch  987\n",
      " epoch  988\n",
      " epoch  989\n",
      " epoch  990\n",
      " epoch  991\n",
      " epoch  992\n",
      " epoch  993\n",
      " epoch  994\n",
      " epoch  995\n",
      " epoch  996\n",
      " epoch  997\n",
      " epoch  998\n",
      " epoch  999\n",
      "[[-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]\n",
      " [-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]\n",
      " [-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]\n",
      " ...\n",
      " [-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]\n",
      " [-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]\n",
      " [-2106.333   1874.4669  3365.3616 ...  1108.7703  2332.7136  1566.6542]]\n",
      "[[-2776.978    2567.0916   4290.7437  ...  1137.3843   2876.507\n",
      "   1946.7539 ]\n",
      " [-2201.14     1903.648    3391.7502  ...   664.9632   2224.8281\n",
      "   1455.8477 ]\n",
      " [-2261.9841   2036.8999   3384.8179  ...   971.1634   2297.89\n",
      "   1572.5847 ]\n",
      " ...\n",
      " [-2156.1907   1975.6217   3316.9146  ...   903.59894  2272.347\n",
      "   1558.5986 ]\n",
      " [-2589.6726   2308.9204   3882.0054  ...  1066.2675   2660.4172\n",
      "   1768.6489 ]\n",
      " [-2568.43     2274.9316   3922.7832  ...  1009.221    2732.77\n",
      "   1790.3854 ]]\n"
     ]
    }
   ],
   "source": [
    "input_shape = 2914\n",
    "latent_space = 150\n",
    "\n",
    "autoencoder = FacesAutoencoder(latent_space=latent_space,input_shape=input_shape)\n",
    "\n",
    "autoencoder.fit(x_train, epochs=1000)\n",
    "\n",
    "encoded_input1 = autoencoder.encode(x_train)\n",
    "\n",
    "print(encoded_input1)\n",
    "\n",
    "encoded_input2 = autoencoder.encode(x_test)\n",
    "\n",
    "print(encoded_input2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\ndecoded_input1 = autoencoder.decode(encoded_input1)#,\\n                                    #timesteps=input1.shape[1])    # We need to specify how many timesteps the decoded version should have.\\ndecoded_input2 = autoencoder.decode(encoded_input2)#,\\n                                    #timesteps=input2.shape[1])    # We need to specify how many timesteps the decoded version should have.\\n\\n# Compare both:\\nprint(\"\\nFor input1 - decoded\")\\ndisplay(x_train)\\ndisplay(decoded_input1)\\n\\nprint(\"\\nFor input2 - decoded\")\\ndisplay(x_test)\\ndisplay(decoded_input2)\\n'"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "decoded_input1 = autoencoder.decode(encoded_input1)#,\n",
    "                                    #timesteps=input1.shape[1])    # We need to specify how many timesteps the decoded version should have.\n",
    "decoded_input2 = autoencoder.decode(encoded_input2)#,\n",
    "                                    #timesteps=input2.shape[1])    # We need to specify how many timesteps the decoded version should have.\n",
    "\n",
    "# Compare both:\n",
    "print(\"\\nFor input1 - decoded\")\n",
    "display(x_train)\n",
    "display(decoded_input1)\n",
    "\n",
    "print(\"\\nFor input2 - decoded\")\n",
    "display(x_test)\n",
    "display(decoded_input2)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(40, 150)\n",
      "(10, 150)\n"
     ]
    }
   ],
   "source": [
    "print(encoded_input1.shape)\n",
    "print(encoded_input2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
